/* Auto-generated by genmsg_cpp for file /home/lluis/catkin_ws/src/usc-clmc-ros-pkg/dmp/dynamic_movement_primitive/msg/TransformationSystemStateMsg.msg */
#ifndef DYNAMIC_MOVEMENT_PRIMITIVE_MESSAGE_TRANSFORMATIONSYSTEMSTATEMSG_H
#define DYNAMIC_MOVEMENT_PRIMITIVE_MESSAGE_TRANSFORMATIONSYSTEMSTATEMSG_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "dynamic_movement_primitive/StateMsg.h"
#include "dynamic_movement_primitive/StateMsg.h"
#include "dynamic_movement_primitive/StateMsg.h"

namespace dynamic_movement_primitive
{
template <class ContainerAllocator>
struct TransformationSystemStateMsg_ {
  typedef TransformationSystemStateMsg_<ContainerAllocator> Type;

  TransformationSystemStateMsg_()
  : internal()
  , target()
  , current()
  , start(0.0)
  , goal(0.0)
  , f(0.0)
  , ft(0.0)
  {
  }

  TransformationSystemStateMsg_(const ContainerAllocator& _alloc)
  : internal(_alloc)
  , target(_alloc)
  , current(_alloc)
  , start(0.0)
  , goal(0.0)
  , f(0.0)
  , ft(0.0)
  {
  }

  typedef  ::dynamic_movement_primitive::StateMsg_<ContainerAllocator>  _internal_type;
   ::dynamic_movement_primitive::StateMsg_<ContainerAllocator>  internal;

  typedef  ::dynamic_movement_primitive::StateMsg_<ContainerAllocator>  _target_type;
   ::dynamic_movement_primitive::StateMsg_<ContainerAllocator>  target;

  typedef  ::dynamic_movement_primitive::StateMsg_<ContainerAllocator>  _current_type;
   ::dynamic_movement_primitive::StateMsg_<ContainerAllocator>  current;

  typedef double _start_type;
  double start;

  typedef double _goal_type;
  double goal;

  typedef double _f_type;
  double f;

  typedef double _ft_type;
  double ft;


  typedef boost::shared_ptr< ::dynamic_movement_primitive::TransformationSystemStateMsg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::dynamic_movement_primitive::TransformationSystemStateMsg_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct TransformationSystemStateMsg
typedef  ::dynamic_movement_primitive::TransformationSystemStateMsg_<std::allocator<void> > TransformationSystemStateMsg;

typedef boost::shared_ptr< ::dynamic_movement_primitive::TransformationSystemStateMsg> TransformationSystemStateMsgPtr;
typedef boost::shared_ptr< ::dynamic_movement_primitive::TransformationSystemStateMsg const> TransformationSystemStateMsgConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::dynamic_movement_primitive::TransformationSystemStateMsg_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::dynamic_movement_primitive::TransformationSystemStateMsg_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace dynamic_movement_primitive

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::dynamic_movement_primitive::TransformationSystemStateMsg_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::dynamic_movement_primitive::TransformationSystemStateMsg_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::dynamic_movement_primitive::TransformationSystemStateMsg_<ContainerAllocator> > {
  static const char* value() 
  {
    return "cdbd9b9ee1a70ce67d7d8da964103e06";
  }

  static const char* value(const  ::dynamic_movement_primitive::TransformationSystemStateMsg_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xcdbd9b9ee1a70ce6ULL;
  static const uint64_t static_value2 = 0x7d7d8da964103e06ULL;
};

template<class ContainerAllocator>
struct DataType< ::dynamic_movement_primitive::TransformationSystemStateMsg_<ContainerAllocator> > {
  static const char* value() 
  {
    return "dynamic_movement_primitive/TransformationSystemStateMsg";
  }

  static const char* value(const  ::dynamic_movement_primitive::TransformationSystemStateMsg_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::dynamic_movement_primitive::TransformationSystemStateMsg_<ContainerAllocator> > {
  static const char* value() 
  {
    return "dynamic_movement_primitive/StateMsg internal\n\
dynamic_movement_primitive/StateMsg target\n\
dynamic_movement_primitive/StateMsg current\n\
\n\
float64 start\n\
float64 goal\n\
\n\
float64 f\n\
float64 ft\n\
\n\
# float64[] function_input\n\
# float64[] function_target\n\
\n\
================================================================================\n\
MSG: dynamic_movement_primitive/StateMsg\n\
float64 x\n\
float64 xd\n\
float64 xdd\n\
\n\
";
  }

  static const char* value(const  ::dynamic_movement_primitive::TransformationSystemStateMsg_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::dynamic_movement_primitive::TransformationSystemStateMsg_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::dynamic_movement_primitive::TransformationSystemStateMsg_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.internal);
    stream.next(m.target);
    stream.next(m.current);
    stream.next(m.start);
    stream.next(m.goal);
    stream.next(m.f);
    stream.next(m.ft);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct TransformationSystemStateMsg_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::dynamic_movement_primitive::TransformationSystemStateMsg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::dynamic_movement_primitive::TransformationSystemStateMsg_<ContainerAllocator> & v) 
  {
    s << indent << "internal: ";
s << std::endl;
    Printer< ::dynamic_movement_primitive::StateMsg_<ContainerAllocator> >::stream(s, indent + "  ", v.internal);
    s << indent << "target: ";
s << std::endl;
    Printer< ::dynamic_movement_primitive::StateMsg_<ContainerAllocator> >::stream(s, indent + "  ", v.target);
    s << indent << "current: ";
s << std::endl;
    Printer< ::dynamic_movement_primitive::StateMsg_<ContainerAllocator> >::stream(s, indent + "  ", v.current);
    s << indent << "start: ";
    Printer<double>::stream(s, indent + "  ", v.start);
    s << indent << "goal: ";
    Printer<double>::stream(s, indent + "  ", v.goal);
    s << indent << "f: ";
    Printer<double>::stream(s, indent + "  ", v.f);
    s << indent << "ft: ";
    Printer<double>::stream(s, indent + "  ", v.ft);
  }
};


} // namespace message_operations
} // namespace ros

#endif // DYNAMIC_MOVEMENT_PRIMITIVE_MESSAGE_TRANSFORMATIONSYSTEMSTATEMSG_H

