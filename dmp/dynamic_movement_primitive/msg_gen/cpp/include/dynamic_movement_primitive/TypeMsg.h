/* Auto-generated by genmsg_cpp for file /home/lluis/catkin_ws/src/usc-clmc-ros-pkg/dmp/dynamic_movement_primitive/msg/TypeMsg.msg */
#ifndef DYNAMIC_MOVEMENT_PRIMITIVE_MESSAGE_TYPEMSG_H
#define DYNAMIC_MOVEMENT_PRIMITIVE_MESSAGE_TYPEMSG_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace dynamic_movement_primitive
{
template <class ContainerAllocator>
struct TypeMsg_ {
  typedef TypeMsg_<ContainerAllocator> Type;

  TypeMsg_()
  : type(0)
  {
  }

  TypeMsg_(const ContainerAllocator& _alloc)
  : type(0)
  {
  }

  typedef int32_t _type_type;
  int32_t type;

  enum { UNSPECIFIED = 0 };
  enum { DISCRETE_JOINT_SPACE = 1 };
  enum { DISCRETE_CARTESIAN_SPACE = 2 };
  enum { DISCRETE_CARTESIAN_AND_JOINT_SPACE = 3 };
  enum { NUM_TYPES = 4 };

  typedef boost::shared_ptr< ::dynamic_movement_primitive::TypeMsg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::dynamic_movement_primitive::TypeMsg_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct TypeMsg
typedef  ::dynamic_movement_primitive::TypeMsg_<std::allocator<void> > TypeMsg;

typedef boost::shared_ptr< ::dynamic_movement_primitive::TypeMsg> TypeMsgPtr;
typedef boost::shared_ptr< ::dynamic_movement_primitive::TypeMsg const> TypeMsgConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::dynamic_movement_primitive::TypeMsg_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::dynamic_movement_primitive::TypeMsg_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace dynamic_movement_primitive

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::dynamic_movement_primitive::TypeMsg_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::dynamic_movement_primitive::TypeMsg_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::dynamic_movement_primitive::TypeMsg_<ContainerAllocator> > {
  static const char* value() 
  {
    return "9d058b1d56f9e4525193e11aae09e0d7";
  }

  static const char* value(const  ::dynamic_movement_primitive::TypeMsg_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x9d058b1d56f9e452ULL;
  static const uint64_t static_value2 = 0x5193e11aae09e0d7ULL;
};

template<class ContainerAllocator>
struct DataType< ::dynamic_movement_primitive::TypeMsg_<ContainerAllocator> > {
  static const char* value() 
  {
    return "dynamic_movement_primitive/TypeMsg";
  }

  static const char* value(const  ::dynamic_movement_primitive::TypeMsg_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::dynamic_movement_primitive::TypeMsg_<ContainerAllocator> > {
  static const char* value() 
  {
    return "int32 type\n\
int32 UNSPECIFIED = 0\n\
int32 DISCRETE_JOINT_SPACE = 1\n\
int32 DISCRETE_CARTESIAN_SPACE = 2\n\
int32 DISCRETE_CARTESIAN_AND_JOINT_SPACE = 3\n\
int32 NUM_TYPES = 4\n\
";
  }

  static const char* value(const  ::dynamic_movement_primitive::TypeMsg_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::dynamic_movement_primitive::TypeMsg_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::dynamic_movement_primitive::TypeMsg_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.type);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct TypeMsg_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::dynamic_movement_primitive::TypeMsg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::dynamic_movement_primitive::TypeMsg_<ContainerAllocator> & v) 
  {
    s << indent << "type: ";
    Printer<int32_t>::stream(s, indent + "  ", v.type);
  }
};


} // namespace message_operations
} // namespace ros

#endif // DYNAMIC_MOVEMENT_PRIMITIVE_MESSAGE_TYPEMSG_H

