/* Auto-generated by genmsg_cpp for file /home/lluis/catkin_ws/src/usc-clmc-ros-pkg/dmp/dynamic_movement_primitive/msg/DynamicMovementPrimitiveParametersMsg.msg */
#ifndef DYNAMIC_MOVEMENT_PRIMITIVE_MESSAGE_DYNAMICMOVEMENTPRIMITIVEPARAMETERSMSG_H
#define DYNAMIC_MOVEMENT_PRIMITIVE_MESSAGE_DYNAMICMOVEMENTPRIMITIVEPARAMETERSMSG_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "dynamic_movement_primitive/TimeMsg.h"

namespace dynamic_movement_primitive
{
template <class ContainerAllocator>
struct DynamicMovementPrimitiveParametersMsg_ {
  typedef DynamicMovementPrimitiveParametersMsg_<ContainerAllocator> Type;

  DynamicMovementPrimitiveParametersMsg_()
  : initial_time()
  , teaching_duration(0.0)
  , execution_duration(0.0)
  , cutoff(0.0)
  , type(0)
  , id(0)
  {
  }

  DynamicMovementPrimitiveParametersMsg_(const ContainerAllocator& _alloc)
  : initial_time(_alloc)
  , teaching_duration(0.0)
  , execution_duration(0.0)
  , cutoff(0.0)
  , type(0)
  , id(0)
  {
  }

  typedef  ::dynamic_movement_primitive::TimeMsg_<ContainerAllocator>  _initial_time_type;
   ::dynamic_movement_primitive::TimeMsg_<ContainerAllocator>  initial_time;

  typedef double _teaching_duration_type;
  double teaching_duration;

  typedef double _execution_duration_type;
  double execution_duration;

  typedef double _cutoff_type;
  double cutoff;

  typedef int32_t _type_type;
  int32_t type;

  typedef int32_t _id_type;
  int32_t id;


  typedef boost::shared_ptr< ::dynamic_movement_primitive::DynamicMovementPrimitiveParametersMsg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::dynamic_movement_primitive::DynamicMovementPrimitiveParametersMsg_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct DynamicMovementPrimitiveParametersMsg
typedef  ::dynamic_movement_primitive::DynamicMovementPrimitiveParametersMsg_<std::allocator<void> > DynamicMovementPrimitiveParametersMsg;

typedef boost::shared_ptr< ::dynamic_movement_primitive::DynamicMovementPrimitiveParametersMsg> DynamicMovementPrimitiveParametersMsgPtr;
typedef boost::shared_ptr< ::dynamic_movement_primitive::DynamicMovementPrimitiveParametersMsg const> DynamicMovementPrimitiveParametersMsgConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::dynamic_movement_primitive::DynamicMovementPrimitiveParametersMsg_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::dynamic_movement_primitive::DynamicMovementPrimitiveParametersMsg_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace dynamic_movement_primitive

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::dynamic_movement_primitive::DynamicMovementPrimitiveParametersMsg_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::dynamic_movement_primitive::DynamicMovementPrimitiveParametersMsg_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::dynamic_movement_primitive::DynamicMovementPrimitiveParametersMsg_<ContainerAllocator> > {
  static const char* value() 
  {
    return "fd17fa670eff607981ce08d952fd5648";
  }

  static const char* value(const  ::dynamic_movement_primitive::DynamicMovementPrimitiveParametersMsg_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xfd17fa670eff6079ULL;
  static const uint64_t static_value2 = 0x81ce08d952fd5648ULL;
};

template<class ContainerAllocator>
struct DataType< ::dynamic_movement_primitive::DynamicMovementPrimitiveParametersMsg_<ContainerAllocator> > {
  static const char* value() 
  {
    return "dynamic_movement_primitive/DynamicMovementPrimitiveParametersMsg";
  }

  static const char* value(const  ::dynamic_movement_primitive::DynamicMovementPrimitiveParametersMsg_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::dynamic_movement_primitive::DynamicMovementPrimitiveParametersMsg_<ContainerAllocator> > {
  static const char* value() 
  {
    return "dynamic_movement_primitive/TimeMsg initial_time\n\
float64 teaching_duration\n\
float64 execution_duration\n\
float64 cutoff\n\
int32 type\n\
int32 id\n\
\n\
================================================================================\n\
MSG: dynamic_movement_primitive/TimeMsg\n\
float64 delta_t\n\
float64 tau\n\
\n\
";
  }

  static const char* value(const  ::dynamic_movement_primitive::DynamicMovementPrimitiveParametersMsg_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::dynamic_movement_primitive::DynamicMovementPrimitiveParametersMsg_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::dynamic_movement_primitive::DynamicMovementPrimitiveParametersMsg_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.initial_time);
    stream.next(m.teaching_duration);
    stream.next(m.execution_duration);
    stream.next(m.cutoff);
    stream.next(m.type);
    stream.next(m.id);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct DynamicMovementPrimitiveParametersMsg_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::dynamic_movement_primitive::DynamicMovementPrimitiveParametersMsg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::dynamic_movement_primitive::DynamicMovementPrimitiveParametersMsg_<ContainerAllocator> & v) 
  {
    s << indent << "initial_time: ";
s << std::endl;
    Printer< ::dynamic_movement_primitive::TimeMsg_<ContainerAllocator> >::stream(s, indent + "  ", v.initial_time);
    s << indent << "teaching_duration: ";
    Printer<double>::stream(s, indent + "  ", v.teaching_duration);
    s << indent << "execution_duration: ";
    Printer<double>::stream(s, indent + "  ", v.execution_duration);
    s << indent << "cutoff: ";
    Printer<double>::stream(s, indent + "  ", v.cutoff);
    s << indent << "type: ";
    Printer<int32_t>::stream(s, indent + "  ", v.type);
    s << indent << "id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.id);
  }
};


} // namespace message_operations
} // namespace ros

#endif // DYNAMIC_MOVEMENT_PRIMITIVE_MESSAGE_DYNAMICMOVEMENTPRIMITIVEPARAMETERSMSG_H

