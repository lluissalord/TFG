/* Auto-generated by genmsg_cpp for file /home/lluis/catkin_ws/src/usc-clmc-ros-pkg/dmp/dynamic_movement_primitive/msg/NC2010TransformationSystemMsg.msg */
#ifndef DYNAMIC_MOVEMENT_PRIMITIVE_MESSAGE_NC2010TRANSFORMATIONSYSTEMMSG_H
#define DYNAMIC_MOVEMENT_PRIMITIVE_MESSAGE_NC2010TRANSFORMATIONSYSTEMMSG_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "dynamic_movement_primitive/TransformationSystemMsg.h"
#include "dynamic_movement_primitive/NC2010TransformationSystemStateMsg.h"
#include "dynamic_movement_primitive/NC2010TransformationSystemParametersMsg.h"

namespace dynamic_movement_primitive
{
template <class ContainerAllocator>
struct NC2010TransformationSystemMsg_ {
  typedef NC2010TransformationSystemMsg_<ContainerAllocator> Type;

  NC2010TransformationSystemMsg_()
  : transformation_system()
  , states()
  , parameters()
  {
  }

  NC2010TransformationSystemMsg_(const ContainerAllocator& _alloc)
  : transformation_system(_alloc)
  , states(_alloc)
  , parameters(_alloc)
  {
  }

  typedef  ::dynamic_movement_primitive::TransformationSystemMsg_<ContainerAllocator>  _transformation_system_type;
   ::dynamic_movement_primitive::TransformationSystemMsg_<ContainerAllocator>  transformation_system;

  typedef std::vector< ::dynamic_movement_primitive::NC2010TransformationSystemStateMsg_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::dynamic_movement_primitive::NC2010TransformationSystemStateMsg_<ContainerAllocator> >::other >  _states_type;
  std::vector< ::dynamic_movement_primitive::NC2010TransformationSystemStateMsg_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::dynamic_movement_primitive::NC2010TransformationSystemStateMsg_<ContainerAllocator> >::other >  states;

  typedef std::vector< ::dynamic_movement_primitive::NC2010TransformationSystemParametersMsg_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::dynamic_movement_primitive::NC2010TransformationSystemParametersMsg_<ContainerAllocator> >::other >  _parameters_type;
  std::vector< ::dynamic_movement_primitive::NC2010TransformationSystemParametersMsg_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::dynamic_movement_primitive::NC2010TransformationSystemParametersMsg_<ContainerAllocator> >::other >  parameters;


  typedef boost::shared_ptr< ::dynamic_movement_primitive::NC2010TransformationSystemMsg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::dynamic_movement_primitive::NC2010TransformationSystemMsg_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct NC2010TransformationSystemMsg
typedef  ::dynamic_movement_primitive::NC2010TransformationSystemMsg_<std::allocator<void> > NC2010TransformationSystemMsg;

typedef boost::shared_ptr< ::dynamic_movement_primitive::NC2010TransformationSystemMsg> NC2010TransformationSystemMsgPtr;
typedef boost::shared_ptr< ::dynamic_movement_primitive::NC2010TransformationSystemMsg const> NC2010TransformationSystemMsgConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::dynamic_movement_primitive::NC2010TransformationSystemMsg_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::dynamic_movement_primitive::NC2010TransformationSystemMsg_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace dynamic_movement_primitive

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::dynamic_movement_primitive::NC2010TransformationSystemMsg_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::dynamic_movement_primitive::NC2010TransformationSystemMsg_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::dynamic_movement_primitive::NC2010TransformationSystemMsg_<ContainerAllocator> > {
  static const char* value() 
  {
    return "3b7bd12f6619c2b693737fa98abdf97c";
  }

  static const char* value(const  ::dynamic_movement_primitive::NC2010TransformationSystemMsg_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x3b7bd12f6619c2b6ULL;
  static const uint64_t static_value2 = 0x93737fa98abdf97cULL;
};

template<class ContainerAllocator>
struct DataType< ::dynamic_movement_primitive::NC2010TransformationSystemMsg_<ContainerAllocator> > {
  static const char* value() 
  {
    return "dynamic_movement_primitive/NC2010TransformationSystemMsg";
  }

  static const char* value(const  ::dynamic_movement_primitive::NC2010TransformationSystemMsg_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::dynamic_movement_primitive::NC2010TransformationSystemMsg_<ContainerAllocator> > {
  static const char* value() 
  {
    return "dynamic_movement_primitive/TransformationSystemMsg transformation_system\n\
dynamic_movement_primitive/NC2010TransformationSystemStateMsg[] states\n\
dynamic_movement_primitive/NC2010TransformationSystemParametersMsg[] parameters\n\
\n\
================================================================================\n\
MSG: dynamic_movement_primitive/TransformationSystemMsg\n\
dynamic_movement_primitive/TransformationSystemStateMsg[] states\n\
dynamic_movement_primitive/TransformationSystemParametersMsg[] parameters\n\
int32 integration_method\n\
\n\
================================================================================\n\
MSG: dynamic_movement_primitive/TransformationSystemStateMsg\n\
dynamic_movement_primitive/StateMsg internal\n\
dynamic_movement_primitive/StateMsg target\n\
dynamic_movement_primitive/StateMsg current\n\
\n\
float64 start\n\
float64 goal\n\
\n\
float64 f\n\
float64 ft\n\
\n\
# float64[] function_input\n\
# float64[] function_target\n\
\n\
================================================================================\n\
MSG: dynamic_movement_primitive/StateMsg\n\
float64 x\n\
float64 xd\n\
float64 xdd\n\
\n\
================================================================================\n\
MSG: dynamic_movement_primitive/TransformationSystemParametersMsg\n\
float64 initial_start\n\
float64 initial_goal\n\
\n\
string name\n\
\n\
locally_weighted_regression/Model lwr_model\n\
================================================================================\n\
MSG: locally_weighted_regression/Model\n\
int32 num_rfs\n\
bool use_offsets\n\
float64[] widths\n\
float64[] centers\n\
float64[] slopes\n\
float64[] offsets\n\
\n\
================================================================================\n\
MSG: dynamic_movement_primitive/NC2010TransformationSystemStateMsg\n\
\n\
================================================================================\n\
MSG: dynamic_movement_primitive/NC2010TransformationSystemParametersMsg\n\
float64 k_gain\n\
float64 d_gain\n\
\n\
";
  }

  static const char* value(const  ::dynamic_movement_primitive::NC2010TransformationSystemMsg_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::dynamic_movement_primitive::NC2010TransformationSystemMsg_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.transformation_system);
    stream.next(m.states);
    stream.next(m.parameters);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct NC2010TransformationSystemMsg_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::dynamic_movement_primitive::NC2010TransformationSystemMsg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::dynamic_movement_primitive::NC2010TransformationSystemMsg_<ContainerAllocator> & v) 
  {
    s << indent << "transformation_system: ";
s << std::endl;
    Printer< ::dynamic_movement_primitive::TransformationSystemMsg_<ContainerAllocator> >::stream(s, indent + "  ", v.transformation_system);
    s << indent << "states[]" << std::endl;
    for (size_t i = 0; i < v.states.size(); ++i)
    {
      s << indent << "  states[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::dynamic_movement_primitive::NC2010TransformationSystemStateMsg_<ContainerAllocator> >::stream(s, indent + "    ", v.states[i]);
    }
    s << indent << "parameters[]" << std::endl;
    for (size_t i = 0; i < v.parameters.size(); ++i)
    {
      s << indent << "  parameters[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::dynamic_movement_primitive::NC2010TransformationSystemParametersMsg_<ContainerAllocator> >::stream(s, indent + "    ", v.parameters[i]);
    }
  }
};


} // namespace message_operations
} // namespace ros

#endif // DYNAMIC_MOVEMENT_PRIMITIVE_MESSAGE_NC2010TRANSFORMATIONSYSTEMMSG_H

