/* Auto-generated by genmsg_cpp for file /home/lluis/catkin_ws/src/usc-clmc-ros-pkg/dmp/dynamic_movement_primitive/msg/ControllerStatusMsg.msg */
#ifndef DYNAMIC_MOVEMENT_PRIMITIVE_MESSAGE_CONTROLLERSTATUSMSG_H
#define DYNAMIC_MOVEMENT_PRIMITIVE_MESSAGE_CONTROLLERSTATUSMSG_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace dynamic_movement_primitive
{
template <class ContainerAllocator>
struct ControllerStatusMsg_ {
  typedef ControllerStatusMsg_<ContainerAllocator> Type;

  ControllerStatusMsg_()
  : seq(0)
  , percent_complete(0.0)
  , status(0)
  , id(0)
  , start_time()
  , end_time()
  {
  }

  ControllerStatusMsg_(const ContainerAllocator& _alloc)
  : seq(0)
  , percent_complete(0.0)
  , status(0)
  , id(0)
  , start_time()
  , end_time()
  {
  }

  typedef int32_t _seq_type;
  int32_t seq;

  typedef double _percent_complete_type;
  double percent_complete;

  typedef int32_t _status_type;
  int32_t status;

  typedef int32_t _id_type;
  int32_t id;

  typedef ros::Time _start_time_type;
  ros::Time start_time;

  typedef ros::Time _end_time_type;
  ros::Time end_time;

  enum { IDLE = 0 };
  enum { STARTED = 1 };
  enum { PREEMPTED = 2 };
  enum { SWAPPED = 3 };
  enum { FINISHED = 4 };
  enum { FAILED = 5 };

  typedef boost::shared_ptr< ::dynamic_movement_primitive::ControllerStatusMsg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::dynamic_movement_primitive::ControllerStatusMsg_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct ControllerStatusMsg
typedef  ::dynamic_movement_primitive::ControllerStatusMsg_<std::allocator<void> > ControllerStatusMsg;

typedef boost::shared_ptr< ::dynamic_movement_primitive::ControllerStatusMsg> ControllerStatusMsgPtr;
typedef boost::shared_ptr< ::dynamic_movement_primitive::ControllerStatusMsg const> ControllerStatusMsgConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::dynamic_movement_primitive::ControllerStatusMsg_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::dynamic_movement_primitive::ControllerStatusMsg_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace dynamic_movement_primitive

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::dynamic_movement_primitive::ControllerStatusMsg_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::dynamic_movement_primitive::ControllerStatusMsg_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::dynamic_movement_primitive::ControllerStatusMsg_<ContainerAllocator> > {
  static const char* value() 
  {
    return "4bfcce93c8ed1804fd0667fdcf64c916";
  }

  static const char* value(const  ::dynamic_movement_primitive::ControllerStatusMsg_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x4bfcce93c8ed1804ULL;
  static const uint64_t static_value2 = 0xfd0667fdcf64c916ULL;
};

template<class ContainerAllocator>
struct DataType< ::dynamic_movement_primitive::ControllerStatusMsg_<ContainerAllocator> > {
  static const char* value() 
  {
    return "dynamic_movement_primitive/ControllerStatusMsg";
  }

  static const char* value(const  ::dynamic_movement_primitive::ControllerStatusMsg_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::dynamic_movement_primitive::ControllerStatusMsg_<ContainerAllocator> > {
  static const char* value() 
  {
    return "int32 seq\n\
float64 percent_complete\n\
int32 status\n\
int32 id\n\
int32 IDLE=0\n\
int32 STARTED=1\n\
int32 PREEMPTED=2\n\
int32 SWAPPED=3\n\
int32 FINISHED=4\n\
int32 FAILED=5\n\
time start_time\n\
time end_time\n\
\n\
";
  }

  static const char* value(const  ::dynamic_movement_primitive::ControllerStatusMsg_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::dynamic_movement_primitive::ControllerStatusMsg_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::dynamic_movement_primitive::ControllerStatusMsg_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.seq);
    stream.next(m.percent_complete);
    stream.next(m.status);
    stream.next(m.id);
    stream.next(m.start_time);
    stream.next(m.end_time);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct ControllerStatusMsg_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::dynamic_movement_primitive::ControllerStatusMsg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::dynamic_movement_primitive::ControllerStatusMsg_<ContainerAllocator> & v) 
  {
    s << indent << "seq: ";
    Printer<int32_t>::stream(s, indent + "  ", v.seq);
    s << indent << "percent_complete: ";
    Printer<double>::stream(s, indent + "  ", v.percent_complete);
    s << indent << "status: ";
    Printer<int32_t>::stream(s, indent + "  ", v.status);
    s << indent << "id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.id);
    s << indent << "start_time: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.start_time);
    s << indent << "end_time: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.end_time);
  }
};


} // namespace message_operations
} // namespace ros

#endif // DYNAMIC_MOVEMENT_PRIMITIVE_MESSAGE_CONTROLLERSTATUSMSG_H

