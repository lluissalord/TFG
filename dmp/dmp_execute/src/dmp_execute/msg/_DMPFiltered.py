"""autogenerated by genpy from dmp_execute/DMPFiltered.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import dynamic_movement_primitive.msg
import locally_weighted_regression.msg
import std_msgs.msg

class DMPFiltered(genpy.Message):
  _md5sum = "270e59cd62e297bc34d90a547374f351"
  _type = "dmp_execute/DMPFiltered"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """Header header
dynamic_movement_primitive/ICRA2009DynamicMovementPrimitiveMsg msg

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.secs: seconds (stamp_secs) since epoch
# * stamp.nsecs: nanoseconds since stamp_secs
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: dynamic_movement_primitive/ICRA2009DynamicMovementPrimitiveMsg
dynamic_movement_primitive/DynamicMovementPrimitiveMsg dmp
dynamic_movement_primitive/ICRA2009DynamicMovementPrimitiveStateMsg state
dynamic_movement_primitive/ICRA2009DynamicMovementPrimitiveParametersMsg parameters
dynamic_movement_primitive/ICRA2009TransformationSystemMsg[] transformation_systems
dynamic_movement_primitive/ICRA2009CanonicalSystemMsg canonical_system
================================================================================
MSG: dynamic_movement_primitive/DynamicMovementPrimitiveMsg
dynamic_movement_primitive/DynamicMovementPrimitiveStateMsg state
dynamic_movement_primitive/DynamicMovementPrimitiveParametersMsg parameters

================================================================================
MSG: dynamic_movement_primitive/DynamicMovementPrimitiveStateMsg
bool is_learned
bool is_setup
bool is_start_set
dynamic_movement_primitive/TimeMsg current_time
int32 num_training_samples
int32 num_generated_samples
int32 seq

================================================================================
MSG: dynamic_movement_primitive/TimeMsg
float64 delta_t
float64 tau

================================================================================
MSG: dynamic_movement_primitive/DynamicMovementPrimitiveParametersMsg
dynamic_movement_primitive/TimeMsg initial_time
float64 teaching_duration
float64 execution_duration
float64 cutoff
int32 type
int32 id

================================================================================
MSG: dynamic_movement_primitive/ICRA2009DynamicMovementPrimitiveStateMsg


================================================================================
MSG: dynamic_movement_primitive/ICRA2009DynamicMovementPrimitiveParametersMsg

================================================================================
MSG: dynamic_movement_primitive/ICRA2009TransformationSystemMsg
dynamic_movement_primitive/TransformationSystemMsg transformation_system
dynamic_movement_primitive/ICRA2009TransformationSystemStateMsg[] states
dynamic_movement_primitive/ICRA2009TransformationSystemParametersMsg[] parameters

================================================================================
MSG: dynamic_movement_primitive/TransformationSystemMsg
dynamic_movement_primitive/TransformationSystemStateMsg[] states
dynamic_movement_primitive/TransformationSystemParametersMsg[] parameters
int32 integration_method

================================================================================
MSG: dynamic_movement_primitive/TransformationSystemStateMsg
dynamic_movement_primitive/StateMsg internal
dynamic_movement_primitive/StateMsg target
dynamic_movement_primitive/StateMsg current

float64 start
float64 goal

float64 f
float64 ft

# float64[] function_input
# float64[] function_target

================================================================================
MSG: dynamic_movement_primitive/StateMsg
float64 x
float64 xd
float64 xdd

================================================================================
MSG: dynamic_movement_primitive/TransformationSystemParametersMsg
float64 initial_start
float64 initial_goal

string name

locally_weighted_regression/Model lwr_model
================================================================================
MSG: locally_weighted_regression/Model
int32 num_rfs
bool use_offsets
float64[] widths
float64[] centers
float64[] slopes
float64[] offsets

================================================================================
MSG: dynamic_movement_primitive/ICRA2009TransformationSystemStateMsg

================================================================================
MSG: dynamic_movement_primitive/ICRA2009TransformationSystemParametersMsg
float64 k_gain
float64 d_gain

================================================================================
MSG: dynamic_movement_primitive/ICRA2009CanonicalSystemMsg
dynamic_movement_primitive/CanonicalSystemMsg canonical_system
dynamic_movement_primitive/ICRA2009CanonicalSystemStateMsg state
dynamic_movement_primitive/ICRA2009CanonicalSystemParametersMsg parameters

================================================================================
MSG: dynamic_movement_primitive/CanonicalSystemMsg
dynamic_movement_primitive/CanonicalSystemStateMsg state
dynamic_movement_primitive/CanonicalSystemParametersMsg parameters

================================================================================
MSG: dynamic_movement_primitive/CanonicalSystemStateMsg
dynamic_movement_primitive/StateMsg state
float64 time
================================================================================
MSG: dynamic_movement_primitive/CanonicalSystemParametersMsg
float64 alpha_x

================================================================================
MSG: dynamic_movement_primitive/ICRA2009CanonicalSystemStateMsg

================================================================================
MSG: dynamic_movement_primitive/ICRA2009CanonicalSystemParametersMsg


"""
  __slots__ = ['header','msg']
  _slot_types = ['std_msgs/Header','dynamic_movement_primitive/ICRA2009DynamicMovementPrimitiveMsg']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,msg

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(DMPFiltered, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.msg is None:
        self.msg = dynamic_movement_primitive.msg.ICRA2009DynamicMovementPrimitiveMsg()
    else:
      self.header = std_msgs.msg.Header()
      self.msg = dynamic_movement_primitive.msg.ICRA2009DynamicMovementPrimitiveMsg()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_3B2d3i5d2i.pack(_x.msg.dmp.state.is_learned, _x.msg.dmp.state.is_setup, _x.msg.dmp.state.is_start_set, _x.msg.dmp.state.current_time.delta_t, _x.msg.dmp.state.current_time.tau, _x.msg.dmp.state.num_training_samples, _x.msg.dmp.state.num_generated_samples, _x.msg.dmp.state.seq, _x.msg.dmp.parameters.initial_time.delta_t, _x.msg.dmp.parameters.initial_time.tau, _x.msg.dmp.parameters.teaching_duration, _x.msg.dmp.parameters.execution_duration, _x.msg.dmp.parameters.cutoff, _x.msg.dmp.parameters.type, _x.msg.dmp.parameters.id))
      length = len(self.msg.transformation_systems)
      buff.write(_struct_I.pack(length))
      for val1 in self.msg.transformation_systems:
        _v1 = val1.transformation_system
        length = len(_v1.states)
        buff.write(_struct_I.pack(length))
        for val3 in _v1.states:
          _v2 = val3.internal
          _x = _v2
          buff.write(_struct_3d.pack(_x.x, _x.xd, _x.xdd))
          _v3 = val3.target
          _x = _v3
          buff.write(_struct_3d.pack(_x.x, _x.xd, _x.xdd))
          _v4 = val3.current
          _x = _v4
          buff.write(_struct_3d.pack(_x.x, _x.xd, _x.xdd))
          _x = val3
          buff.write(_struct_4d.pack(_x.start, _x.goal, _x.f, _x.ft))
        length = len(_v1.parameters)
        buff.write(_struct_I.pack(length))
        for val3 in _v1.parameters:
          _x = val3
          buff.write(_struct_2d.pack(_x.initial_start, _x.initial_goal))
          _x = val3.name
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.pack('<I%ss'%length, length, _x))
          _v5 = val3.lwr_model
          _x = _v5
          buff.write(_struct_iB.pack(_x.num_rfs, _x.use_offsets))
          length = len(_v5.widths)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.pack(pattern, *_v5.widths))
          length = len(_v5.centers)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.pack(pattern, *_v5.centers))
          length = len(_v5.slopes)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.pack(pattern, *_v5.slopes))
          length = len(_v5.offsets)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.pack(pattern, *_v5.offsets))
        buff.write(_struct_i.pack(_v1.integration_method))
        length = len(val1.states)
        buff.write(_struct_I.pack(length))
        for val2 in val1.states:
          pass
        length = len(val1.parameters)
        buff.write(_struct_I.pack(length))
        for val2 in val1.parameters:
          _x = val2
          buff.write(_struct_2d.pack(_x.k_gain, _x.d_gain))
      _x = self
      buff.write(_struct_5d.pack(_x.msg.canonical_system.canonical_system.state.state.x, _x.msg.canonical_system.canonical_system.state.state.xd, _x.msg.canonical_system.canonical_system.state.state.xdd, _x.msg.canonical_system.canonical_system.state.time, _x.msg.canonical_system.canonical_system.parameters.alpha_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.msg is None:
        self.msg = dynamic_movement_primitive.msg.ICRA2009DynamicMovementPrimitiveMsg()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 79
      (_x.msg.dmp.state.is_learned, _x.msg.dmp.state.is_setup, _x.msg.dmp.state.is_start_set, _x.msg.dmp.state.current_time.delta_t, _x.msg.dmp.state.current_time.tau, _x.msg.dmp.state.num_training_samples, _x.msg.dmp.state.num_generated_samples, _x.msg.dmp.state.seq, _x.msg.dmp.parameters.initial_time.delta_t, _x.msg.dmp.parameters.initial_time.tau, _x.msg.dmp.parameters.teaching_duration, _x.msg.dmp.parameters.execution_duration, _x.msg.dmp.parameters.cutoff, _x.msg.dmp.parameters.type, _x.msg.dmp.parameters.id,) = _struct_3B2d3i5d2i.unpack(str[start:end])
      self.msg.dmp.state.is_learned = bool(self.msg.dmp.state.is_learned)
      self.msg.dmp.state.is_setup = bool(self.msg.dmp.state.is_setup)
      self.msg.dmp.state.is_start_set = bool(self.msg.dmp.state.is_start_set)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.msg.transformation_systems = []
      for i in range(0, length):
        val1 = dynamic_movement_primitive.msg.ICRA2009TransformationSystemMsg()
        _v6 = val1.transformation_system
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v6.states = []
        for i in range(0, length):
          val3 = dynamic_movement_primitive.msg.TransformationSystemStateMsg()
          _v7 = val3.internal
          _x = _v7
          start = end
          end += 24
          (_x.x, _x.xd, _x.xdd,) = _struct_3d.unpack(str[start:end])
          _v8 = val3.target
          _x = _v8
          start = end
          end += 24
          (_x.x, _x.xd, _x.xdd,) = _struct_3d.unpack(str[start:end])
          _v9 = val3.current
          _x = _v9
          start = end
          end += 24
          (_x.x, _x.xd, _x.xdd,) = _struct_3d.unpack(str[start:end])
          _x = val3
          start = end
          end += 32
          (_x.start, _x.goal, _x.f, _x.ft,) = _struct_4d.unpack(str[start:end])
          _v6.states.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v6.parameters = []
        for i in range(0, length):
          val3 = dynamic_movement_primitive.msg.TransformationSystemParametersMsg()
          _x = val3
          start = end
          end += 16
          (_x.initial_start, _x.initial_goal,) = _struct_2d.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3.name = str[start:end].decode('utf-8')
          else:
            val3.name = str[start:end]
          _v10 = val3.lwr_model
          _x = _v10
          start = end
          end += 5
          (_x.num_rfs, _x.use_offsets,) = _struct_iB.unpack(str[start:end])
          _v10.use_offsets = bool(_v10.use_offsets)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          _v10.widths = struct.unpack(pattern, str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          _v10.centers = struct.unpack(pattern, str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          _v10.slopes = struct.unpack(pattern, str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          _v10.offsets = struct.unpack(pattern, str[start:end])
          _v6.parameters.append(val3)
        start = end
        end += 4
        (_v6.integration_method,) = _struct_i.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.states = []
        for i in range(0, length):
          val2 = dynamic_movement_primitive.msg.ICRA2009TransformationSystemStateMsg()
          val1.states.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.parameters = []
        for i in range(0, length):
          val2 = dynamic_movement_primitive.msg.ICRA2009TransformationSystemParametersMsg()
          _x = val2
          start = end
          end += 16
          (_x.k_gain, _x.d_gain,) = _struct_2d.unpack(str[start:end])
          val1.parameters.append(val2)
        self.msg.transformation_systems.append(val1)
      _x = self
      start = end
      end += 40
      (_x.msg.canonical_system.canonical_system.state.state.x, _x.msg.canonical_system.canonical_system.state.state.xd, _x.msg.canonical_system.canonical_system.state.state.xdd, _x.msg.canonical_system.canonical_system.state.time, _x.msg.canonical_system.canonical_system.parameters.alpha_x,) = _struct_5d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_3B2d3i5d2i.pack(_x.msg.dmp.state.is_learned, _x.msg.dmp.state.is_setup, _x.msg.dmp.state.is_start_set, _x.msg.dmp.state.current_time.delta_t, _x.msg.dmp.state.current_time.tau, _x.msg.dmp.state.num_training_samples, _x.msg.dmp.state.num_generated_samples, _x.msg.dmp.state.seq, _x.msg.dmp.parameters.initial_time.delta_t, _x.msg.dmp.parameters.initial_time.tau, _x.msg.dmp.parameters.teaching_duration, _x.msg.dmp.parameters.execution_duration, _x.msg.dmp.parameters.cutoff, _x.msg.dmp.parameters.type, _x.msg.dmp.parameters.id))
      length = len(self.msg.transformation_systems)
      buff.write(_struct_I.pack(length))
      for val1 in self.msg.transformation_systems:
        _v11 = val1.transformation_system
        length = len(_v11.states)
        buff.write(_struct_I.pack(length))
        for val3 in _v11.states:
          _v12 = val3.internal
          _x = _v12
          buff.write(_struct_3d.pack(_x.x, _x.xd, _x.xdd))
          _v13 = val3.target
          _x = _v13
          buff.write(_struct_3d.pack(_x.x, _x.xd, _x.xdd))
          _v14 = val3.current
          _x = _v14
          buff.write(_struct_3d.pack(_x.x, _x.xd, _x.xdd))
          _x = val3
          buff.write(_struct_4d.pack(_x.start, _x.goal, _x.f, _x.ft))
        length = len(_v11.parameters)
        buff.write(_struct_I.pack(length))
        for val3 in _v11.parameters:
          _x = val3
          buff.write(_struct_2d.pack(_x.initial_start, _x.initial_goal))
          _x = val3.name
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.pack('<I%ss'%length, length, _x))
          _v15 = val3.lwr_model
          _x = _v15
          buff.write(_struct_iB.pack(_x.num_rfs, _x.use_offsets))
          length = len(_v15.widths)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(_v15.widths.tostring())
          length = len(_v15.centers)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(_v15.centers.tostring())
          length = len(_v15.slopes)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(_v15.slopes.tostring())
          length = len(_v15.offsets)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(_v15.offsets.tostring())
        buff.write(_struct_i.pack(_v11.integration_method))
        length = len(val1.states)
        buff.write(_struct_I.pack(length))
        for val2 in val1.states:
          pass
        length = len(val1.parameters)
        buff.write(_struct_I.pack(length))
        for val2 in val1.parameters:
          _x = val2
          buff.write(_struct_2d.pack(_x.k_gain, _x.d_gain))
      _x = self
      buff.write(_struct_5d.pack(_x.msg.canonical_system.canonical_system.state.state.x, _x.msg.canonical_system.canonical_system.state.state.xd, _x.msg.canonical_system.canonical_system.state.state.xdd, _x.msg.canonical_system.canonical_system.state.time, _x.msg.canonical_system.canonical_system.parameters.alpha_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.msg is None:
        self.msg = dynamic_movement_primitive.msg.ICRA2009DynamicMovementPrimitiveMsg()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 79
      (_x.msg.dmp.state.is_learned, _x.msg.dmp.state.is_setup, _x.msg.dmp.state.is_start_set, _x.msg.dmp.state.current_time.delta_t, _x.msg.dmp.state.current_time.tau, _x.msg.dmp.state.num_training_samples, _x.msg.dmp.state.num_generated_samples, _x.msg.dmp.state.seq, _x.msg.dmp.parameters.initial_time.delta_t, _x.msg.dmp.parameters.initial_time.tau, _x.msg.dmp.parameters.teaching_duration, _x.msg.dmp.parameters.execution_duration, _x.msg.dmp.parameters.cutoff, _x.msg.dmp.parameters.type, _x.msg.dmp.parameters.id,) = _struct_3B2d3i5d2i.unpack(str[start:end])
      self.msg.dmp.state.is_learned = bool(self.msg.dmp.state.is_learned)
      self.msg.dmp.state.is_setup = bool(self.msg.dmp.state.is_setup)
      self.msg.dmp.state.is_start_set = bool(self.msg.dmp.state.is_start_set)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.msg.transformation_systems = []
      for i in range(0, length):
        val1 = dynamic_movement_primitive.msg.ICRA2009TransformationSystemMsg()
        _v16 = val1.transformation_system
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v16.states = []
        for i in range(0, length):
          val3 = dynamic_movement_primitive.msg.TransformationSystemStateMsg()
          _v17 = val3.internal
          _x = _v17
          start = end
          end += 24
          (_x.x, _x.xd, _x.xdd,) = _struct_3d.unpack(str[start:end])
          _v18 = val3.target
          _x = _v18
          start = end
          end += 24
          (_x.x, _x.xd, _x.xdd,) = _struct_3d.unpack(str[start:end])
          _v19 = val3.current
          _x = _v19
          start = end
          end += 24
          (_x.x, _x.xd, _x.xdd,) = _struct_3d.unpack(str[start:end])
          _x = val3
          start = end
          end += 32
          (_x.start, _x.goal, _x.f, _x.ft,) = _struct_4d.unpack(str[start:end])
          _v16.states.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v16.parameters = []
        for i in range(0, length):
          val3 = dynamic_movement_primitive.msg.TransformationSystemParametersMsg()
          _x = val3
          start = end
          end += 16
          (_x.initial_start, _x.initial_goal,) = _struct_2d.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3.name = str[start:end].decode('utf-8')
          else:
            val3.name = str[start:end]
          _v20 = val3.lwr_model
          _x = _v20
          start = end
          end += 5
          (_x.num_rfs, _x.use_offsets,) = _struct_iB.unpack(str[start:end])
          _v20.use_offsets = bool(_v20.use_offsets)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          _v20.widths = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          _v20.centers = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          _v20.slopes = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          _v20.offsets = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          _v16.parameters.append(val3)
        start = end
        end += 4
        (_v16.integration_method,) = _struct_i.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.states = []
        for i in range(0, length):
          val2 = dynamic_movement_primitive.msg.ICRA2009TransformationSystemStateMsg()
          val1.states.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.parameters = []
        for i in range(0, length):
          val2 = dynamic_movement_primitive.msg.ICRA2009TransformationSystemParametersMsg()
          _x = val2
          start = end
          end += 16
          (_x.k_gain, _x.d_gain,) = _struct_2d.unpack(str[start:end])
          val1.parameters.append(val2)
        self.msg.transformation_systems.append(val1)
      _x = self
      start = end
      end += 40
      (_x.msg.canonical_system.canonical_system.state.state.x, _x.msg.canonical_system.canonical_system.state.state.xd, _x.msg.canonical_system.canonical_system.state.state.xdd, _x.msg.canonical_system.canonical_system.state.time, _x.msg.canonical_system.canonical_system.parameters.alpha_x,) = _struct_5d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_i = struct.Struct("<i")
_struct_2d = struct.Struct("<2d")
_struct_3I = struct.Struct("<3I")
_struct_3B2d3i5d2i = struct.Struct("<3B2d3i5d2i")
_struct_5d = struct.Struct("<5d")
_struct_4d = struct.Struct("<4d")
_struct_iB = struct.Struct("<iB")
_struct_3d = struct.Struct("<3d")
