/* Auto-generated by genmsg_cpp for file /home/lluis/catkin_ws/src/usc-clmc-ros-pkg/dmp/locally_weighted_regression/msg/Model.msg */
#ifndef LOCALLY_WEIGHTED_REGRESSION_MESSAGE_MODEL_H
#define LOCALLY_WEIGHTED_REGRESSION_MESSAGE_MODEL_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace locally_weighted_regression
{
template <class ContainerAllocator>
struct Model_ {
  typedef Model_<ContainerAllocator> Type;

  Model_()
  : num_rfs(0)
  , use_offsets(false)
  , widths()
  , centers()
  , slopes()
  , offsets()
  {
  }

  Model_(const ContainerAllocator& _alloc)
  : num_rfs(0)
  , use_offsets(false)
  , widths(_alloc)
  , centers(_alloc)
  , slopes(_alloc)
  , offsets(_alloc)
  {
  }

  typedef int32_t _num_rfs_type;
  int32_t num_rfs;

  typedef uint8_t _use_offsets_type;
  uint8_t use_offsets;

  typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _widths_type;
  std::vector<double, typename ContainerAllocator::template rebind<double>::other >  widths;

  typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _centers_type;
  std::vector<double, typename ContainerAllocator::template rebind<double>::other >  centers;

  typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _slopes_type;
  std::vector<double, typename ContainerAllocator::template rebind<double>::other >  slopes;

  typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _offsets_type;
  std::vector<double, typename ContainerAllocator::template rebind<double>::other >  offsets;


  typedef boost::shared_ptr< ::locally_weighted_regression::Model_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::locally_weighted_regression::Model_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct Model
typedef  ::locally_weighted_regression::Model_<std::allocator<void> > Model;

typedef boost::shared_ptr< ::locally_weighted_regression::Model> ModelPtr;
typedef boost::shared_ptr< ::locally_weighted_regression::Model const> ModelConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::locally_weighted_regression::Model_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::locally_weighted_regression::Model_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace locally_weighted_regression

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::locally_weighted_regression::Model_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::locally_weighted_regression::Model_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::locally_weighted_regression::Model_<ContainerAllocator> > {
  static const char* value() 
  {
    return "e2849a70e52ed2b7b58fe6dd2e311cdd";
  }

  static const char* value(const  ::locally_weighted_regression::Model_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xe2849a70e52ed2b7ULL;
  static const uint64_t static_value2 = 0xb58fe6dd2e311cddULL;
};

template<class ContainerAllocator>
struct DataType< ::locally_weighted_regression::Model_<ContainerAllocator> > {
  static const char* value() 
  {
    return "locally_weighted_regression/Model";
  }

  static const char* value(const  ::locally_weighted_regression::Model_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::locally_weighted_regression::Model_<ContainerAllocator> > {
  static const char* value() 
  {
    return "int32 num_rfs\n\
bool use_offsets\n\
float64[] widths\n\
float64[] centers\n\
float64[] slopes\n\
float64[] offsets\n\
\n\
";
  }

  static const char* value(const  ::locally_weighted_regression::Model_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::locally_weighted_regression::Model_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.num_rfs);
    stream.next(m.use_offsets);
    stream.next(m.widths);
    stream.next(m.centers);
    stream.next(m.slopes);
    stream.next(m.offsets);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct Model_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::locally_weighted_regression::Model_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::locally_weighted_regression::Model_<ContainerAllocator> & v) 
  {
    s << indent << "num_rfs: ";
    Printer<int32_t>::stream(s, indent + "  ", v.num_rfs);
    s << indent << "use_offsets: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.use_offsets);
    s << indent << "widths[]" << std::endl;
    for (size_t i = 0; i < v.widths.size(); ++i)
    {
      s << indent << "  widths[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.widths[i]);
    }
    s << indent << "centers[]" << std::endl;
    for (size_t i = 0; i < v.centers.size(); ++i)
    {
      s << indent << "  centers[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.centers[i]);
    }
    s << indent << "slopes[]" << std::endl;
    for (size_t i = 0; i < v.slopes.size(); ++i)
    {
      s << indent << "  slopes[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.slopes[i]);
    }
    s << indent << "offsets[]" << std::endl;
    for (size_t i = 0; i < v.offsets.size(); ++i)
    {
      s << indent << "  offsets[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.offsets[i]);
    }
  }
};


} // namespace message_operations
} // namespace ros

#endif // LOCALLY_WEIGHTED_REGRESSION_MESSAGE_MODEL_H

