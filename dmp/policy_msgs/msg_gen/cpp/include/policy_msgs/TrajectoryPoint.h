/* Auto-generated by genmsg_cpp for file /home/lluis/catkin_ws/src/usc-clmc-ros-pkg/dmp/policy_msgs/msg/TrajectoryPoint.msg */
#ifndef POLICY_MSGS_MESSAGE_TRAJECTORYPOINT_H
#define POLICY_MSGS_MESSAGE_TRAJECTORYPOINT_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace policy_msgs
{
template <class ContainerAllocator>
struct TrajectoryPoint_ {
  typedef TrajectoryPoint_<ContainerAllocator> Type;

  TrajectoryPoint_()
  : positions()
  {
  }

  TrajectoryPoint_(const ContainerAllocator& _alloc)
  : positions(_alloc)
  {
  }

  typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _positions_type;
  std::vector<double, typename ContainerAllocator::template rebind<double>::other >  positions;


  typedef boost::shared_ptr< ::policy_msgs::TrajectoryPoint_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::policy_msgs::TrajectoryPoint_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct TrajectoryPoint
typedef  ::policy_msgs::TrajectoryPoint_<std::allocator<void> > TrajectoryPoint;

typedef boost::shared_ptr< ::policy_msgs::TrajectoryPoint> TrajectoryPointPtr;
typedef boost::shared_ptr< ::policy_msgs::TrajectoryPoint const> TrajectoryPointConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::policy_msgs::TrajectoryPoint_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::policy_msgs::TrajectoryPoint_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace policy_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::policy_msgs::TrajectoryPoint_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::policy_msgs::TrajectoryPoint_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::policy_msgs::TrajectoryPoint_<ContainerAllocator> > {
  static const char* value() 
  {
    return "3b33cf2d1f9005e741ee291d519b97ee";
  }

  static const char* value(const  ::policy_msgs::TrajectoryPoint_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x3b33cf2d1f9005e7ULL;
  static const uint64_t static_value2 = 0x41ee291d519b97eeULL;
};

template<class ContainerAllocator>
struct DataType< ::policy_msgs::TrajectoryPoint_<ContainerAllocator> > {
  static const char* value() 
  {
    return "policy_msgs/TrajectoryPoint";
  }

  static const char* value(const  ::policy_msgs::TrajectoryPoint_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::policy_msgs::TrajectoryPoint_<ContainerAllocator> > {
  static const char* value() 
  {
    return "# Positions of each dimension at a particular point in time\n\
float64[] positions\n\
\n\
";
  }

  static const char* value(const  ::policy_msgs::TrajectoryPoint_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::policy_msgs::TrajectoryPoint_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.positions);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct TrajectoryPoint_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::policy_msgs::TrajectoryPoint_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::policy_msgs::TrajectoryPoint_<ContainerAllocator> & v) 
  {
    s << indent << "positions[]" << std::endl;
    for (size_t i = 0; i < v.positions.size(); ++i)
    {
      s << indent << "  positions[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.positions[i]);
    }
  }
};


} // namespace message_operations
} // namespace ros

#endif // POLICY_MSGS_MESSAGE_TRAJECTORYPOINT_H

