/* Auto-generated by genmsg_cpp for file /home/lluis/catkin_ws/src/usc-clmc-ros-pkg/dmp/policy_msgs/msg/CovariantTrajectoryPolicy.msg */
#ifndef POLICY_MSGS_MESSAGE_COVARIANTTRAJECTORYPOLICY_H
#define POLICY_MSGS_MESSAGE_COVARIANTTRAJECTORYPOLICY_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "policy_msgs/TrajectoryPoint.h"
#include "geometry_msgs/Pose.h"

namespace policy_msgs
{
template <class ContainerAllocator>
struct CovariantTrajectoryPolicy_ {
  typedef CovariantTrajectoryPolicy_<ContainerAllocator> Type;

  CovariantTrajectoryPolicy_()
  : discretization_interval(0.0)
  , dimension_names()
  , points()
  , derivative_costs()
  , cost_ridge_factor(0.0)
  , nominal_start_pose()
  {
  }

  CovariantTrajectoryPolicy_(const ContainerAllocator& _alloc)
  : discretization_interval(0.0)
  , dimension_names(_alloc)
  , points(_alloc)
  , derivative_costs(_alloc)
  , cost_ridge_factor(0.0)
  , nominal_start_pose(_alloc)
  {
  }

  typedef double _discretization_interval_type;
  double discretization_interval;

  typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _dimension_names_type;
  std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  dimension_names;

  typedef std::vector< ::policy_msgs::TrajectoryPoint_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::policy_msgs::TrajectoryPoint_<ContainerAllocator> >::other >  _points_type;
  std::vector< ::policy_msgs::TrajectoryPoint_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::policy_msgs::TrajectoryPoint_<ContainerAllocator> >::other >  points;

  typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _derivative_costs_type;
  std::vector<double, typename ContainerAllocator::template rebind<double>::other >  derivative_costs;

  typedef double _cost_ridge_factor_type;
  double cost_ridge_factor;

  typedef  ::geometry_msgs::Pose_<ContainerAllocator>  _nominal_start_pose_type;
   ::geometry_msgs::Pose_<ContainerAllocator>  nominal_start_pose;


  typedef boost::shared_ptr< ::policy_msgs::CovariantTrajectoryPolicy_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::policy_msgs::CovariantTrajectoryPolicy_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct CovariantTrajectoryPolicy
typedef  ::policy_msgs::CovariantTrajectoryPolicy_<std::allocator<void> > CovariantTrajectoryPolicy;

typedef boost::shared_ptr< ::policy_msgs::CovariantTrajectoryPolicy> CovariantTrajectoryPolicyPtr;
typedef boost::shared_ptr< ::policy_msgs::CovariantTrajectoryPolicy const> CovariantTrajectoryPolicyConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::policy_msgs::CovariantTrajectoryPolicy_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::policy_msgs::CovariantTrajectoryPolicy_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace policy_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::policy_msgs::CovariantTrajectoryPolicy_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::policy_msgs::CovariantTrajectoryPolicy_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::policy_msgs::CovariantTrajectoryPolicy_<ContainerAllocator> > {
  static const char* value() 
  {
    return "cf6963f18dd8f6c53a82df4e5705cd83";
  }

  static const char* value(const  ::policy_msgs::CovariantTrajectoryPolicy_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xcf6963f18dd8f6c5ULL;
  static const uint64_t static_value2 = 0x3a82df4e5705cd83ULL;
};

template<class ContainerAllocator>
struct DataType< ::policy_msgs::CovariantTrajectoryPolicy_<ContainerAllocator> > {
  static const char* value() 
  {
    return "policy_msgs/CovariantTrajectoryPolicy";
  }

  static const char* value(const  ::policy_msgs::CovariantTrajectoryPolicy_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::policy_msgs::CovariantTrajectoryPolicy_<ContainerAllocator> > {
  static const char* value() 
  {
    return "float64 discretization_interval\n\
string[] dimension_names\n\
\n\
# points[] must contain the start and goal also\n\
policy_msgs/TrajectoryPoint[] points\n\
\n\
# array of size 3, containinrg vel, acc and jerk cost weights\n\
float64[] derivative_costs\n\
\n\
float64 cost_ridge_factor\n\
\n\
geometry_msgs/Pose nominal_start_pose\n\
\n\
================================================================================\n\
MSG: policy_msgs/TrajectoryPoint\n\
# Positions of each dimension at a particular point in time\n\
float64[] positions\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Pose\n\
# A representation of pose in free space, composed of postion and orientation. \n\
Point position\n\
Quaternion orientation\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
\n\
";
  }

  static const char* value(const  ::policy_msgs::CovariantTrajectoryPolicy_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::policy_msgs::CovariantTrajectoryPolicy_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.discretization_interval);
    stream.next(m.dimension_names);
    stream.next(m.points);
    stream.next(m.derivative_costs);
    stream.next(m.cost_ridge_factor);
    stream.next(m.nominal_start_pose);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct CovariantTrajectoryPolicy_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::policy_msgs::CovariantTrajectoryPolicy_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::policy_msgs::CovariantTrajectoryPolicy_<ContainerAllocator> & v) 
  {
    s << indent << "discretization_interval: ";
    Printer<double>::stream(s, indent + "  ", v.discretization_interval);
    s << indent << "dimension_names[]" << std::endl;
    for (size_t i = 0; i < v.dimension_names.size(); ++i)
    {
      s << indent << "  dimension_names[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.dimension_names[i]);
    }
    s << indent << "points[]" << std::endl;
    for (size_t i = 0; i < v.points.size(); ++i)
    {
      s << indent << "  points[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::policy_msgs::TrajectoryPoint_<ContainerAllocator> >::stream(s, indent + "    ", v.points[i]);
    }
    s << indent << "derivative_costs[]" << std::endl;
    for (size_t i = 0; i < v.derivative_costs.size(); ++i)
    {
      s << indent << "  derivative_costs[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.derivative_costs[i]);
    }
    s << indent << "cost_ridge_factor: ";
    Printer<double>::stream(s, indent + "  ", v.cost_ridge_factor);
    s << indent << "nominal_start_pose: ";
s << std::endl;
    Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "  ", v.nominal_start_pose);
  }
};


} // namespace message_operations
} // namespace ros

#endif // POLICY_MSGS_MESSAGE_COVARIANTTRAJECTORYPOLICY_H

